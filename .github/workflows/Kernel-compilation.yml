name: Kernel_compilation

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      checkupdates:
        description: 'Checkupdates connection to Actions'
        required: false
        default: 'false'
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: ""
  schedule:
    - cron: 10 */4 * * *
    
env:
  KERNEL_SOURCE: unifreq
  KERNEL_VERSION: 5.4.228_5.10.161_5.15.100_6.1.16
  KERNEL_TOOLCHAIN: gcc
  KERNEL_PACKAGE: all
  KERNEL_AUTO: true
jobs:
  Checka:
    runs-on: ubuntu-latest
    env:
      REPO_URL_Kernel510: https://github.com/unifreq/linux-5.10.y
      REPO_BRANCH_Kernel510: main
      REPO_PATH_Kernel510 : "Kernel_510"

      REPO_URL_Kernel54: https://github.com/unifreq/linux-5.4.y
      REPO_BRANCH_Kernel54: main
      REPO_PATH_Kernel54 : "Kernel_54"
      
      REPO_URL_Kernel515: https://github.com/unifreq/linux-5.15.y
      REPO_BRANCH_Kernel515: main
      REPO_PATH_Kernel515 : "Kernel_515"

      REPO_URL_Kernel6: https://github.com/unifreq/linux-6.1.y
      REPO_BRANCH_Kernel6: main
      REPO_PATH_Kernel6 : "Kernel_6"
      
    outputs:
      output: ${{ steps.outputunifreq.outputs.unifreq }}
      
    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
      
        git clone --depth 1 $REPO_URL_Kernel510 -b $REPO_BRANCH_Kernel510 $REPO_PATH_Kernel510
        cd $REPO_PATH_Kernel510
        echo "commitHash_Kernel510=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd
        
        git clone --depth 1 $REPO_URL_Kernel54 -b $REPO_BRANCH_Kernel54 $REPO_PATH_Kernel54
        cd $REPO_PATH_Kernel54
        echo "commitHash_Kernel54=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd
        
        git clone --depth 1 $REPO_URL_Kernel515 -b $REPO_BRANCH_Kernel515 $REPO_PATH_Kernel515
        cd $REPO_PATH_Kernel515
        echo "commitHash_Kernel515=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd
        
        git clone --depth 1 $REPO_URL_Kernel6 -b $REPO_BRANCH_Kernel6 $REPO_PATH_Kernel6
        cd $REPO_PATH_Kernel6
        echo "commitHash_Kernel6=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd
        
    - name: Show Commit Head and Combination Heads
      id: combHeader
      run: |
        echo "commitHash_Kernel510: ${{ steps.getHash.outputs.commitHash_Kernel510 }}"
        echo "commitHash_Kernel54: ${{ steps.getHash.outputs.commitHash_Kernel54 }}"
        echo "commitHash_Kernel515: ${{ steps.getHash.outputs.commitHash_Kernel515 }}"
        echo "commitHash_Kernel6: ${{ steps.getHash.outputs.commitHash_Kernel6 }}"
        echo "commitHash_All=\
          ${{steps.getHash.outputs.commitHash_Kernel510}}\
          ${{steps.getHash.outputs.commitHash_Kernel54}}\
          ${{steps.getHash.outputs.commitHash_Kernel515}}\
          ${{steps.getHash.outputs.commitHash_Kernel6}}" >> $GITHUB_OUTPUT
          
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@main
      with:
        path: .commitHash_All
        key: HEAD-${{ steps.combHeader.outputs.commitHash_All }}
   
    - name: Set output for next job
      id: outputunifreq
      if: steps.cacheHash.outputs.cache-hit == 'true'
      run: |
        echo "unifreq=hello" >> $GITHUB_OUTPUT
        
    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash_Kernel510 }} | tee .commitHash_Kernel510
        echo ${{ steps.getHash.outputs.commitHash_Kernel54 }} | tee .commitHash_Kernel54
        echo ${{ steps.getHash.outputs.commitHash_Kernel515 }} | tee .commitHash_Kernel515
        echo ${{ steps.getHash.outputs.commitHash_Kernel6 }} | tee .commitHash_Kernel6
        echo ${{ steps.combHeader.outputs.commitHash_All }} | tee .commitHash_All 
# /////////////////////////////////////////////////////////////////////////////////////////////////////////        
  Build_Kernel:
    needs: [Checka]   
    if: ${{ needs.Checka.outputs.output != 'hello' || github.event.inputs.checkupdates == 'true'}}
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "COMPILE_STARTINGTIME=$(date +"%m.%d.%H%M")" >> $GITHUB_ENV
          
      - name: Compile the kernel for Amlogic s9xxx
        uses: skywrt/kernel@main
        with:
          build_target: kernel
          kernel_source: ${{ env.KERNEL_SOURCE }}
          kernel_version: ${{ env.KERNEL_VERSION }}
          kernel_auto: ${{ env.KERNEL_AUTO }}
          kernel_package: ${{ env.KERNEL_PACKAGE }}
          kernel_sign: ${{ github.event.inputs.kernel_sign }}
          kernel_toolchain: ${{ env.KERNEL_TOOLCHAIN }}

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        with:
          name: Kernel_Stable
          tag: kernel_stable
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            - 这是`稳定版`内核，可以在 Armbian 和 OpenWrt 里使用。
 # //////////////////////////////////////////////////////////////////////////////////////////////
  Cleaning:
    if: ${{ always() }}
    needs: [Checka,Build_Kernel]    
    runs-on: ubuntu-latest
    steps:  
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 3
