name: Build armbian

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      armbian_board:
        description: "Select device board."
        required: false
        default: "s905d"
        type: choice
        options:
          - all
          - s905d
      armbian_kernel:
        description: "Select kernel version."
        required: false
        default: "6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
      auto_kernel:
        description: "Auto use the latest kernel."
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository."
        required: false
        default: "zwrt/kernel"
        type: choice
        options:
          - ophub/kernel
          - zwrt/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
      armbian_fstype:
        description: "Select armbian rootfs type."
        required: false
        default: "ext4"
        type: choice
        options:
          - ext4
          - btrfs
      armbian_storage:
        description: "Select image storage type."
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp
      builder_name:
        description: "Set Armbian builder signature."
        required: false
        default: "zwrt"
        type: choice
        options:
          - ophub
          - angel
          - zwrt
  schedule:
    - cron: 0 21 * * *

env:
  ROOTFS_SCRIPT: compile-kernel/tools/script/armbian_rootfs.sh

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    strategy:
      matrix:
        ARCHITECTURE:
          - jammy
          - bookworm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Download source code
        id: down
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://github.com/armbian/build.git build
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile Armbian [ ${{ matrix.ARCHITECTURE }} ]
        id: compile
        if: ${{ steps.down.outputs.status }} == 'success' && !cancelled()
        run: |
          # Compile method and parameter description: https://docs.armbian.com/Developer-Guide_Build-Options
          cd build/
              ./compile.sh RELEASE=${{ matrix.ARCHITECTURE }} BOARD=odroidn2 BRANCH=current BUILD_MINIMAL=no \
                           BUILD_ONLY=default HOST=armbian BUILD_DESKTOP=no EXPERT=yes KERNEL_CONFIGURE=no \
                           COMPRESS_OUTPUTIMAGE="sha" SHARE_LOG=yes
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Organize files and clear space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # Organize and keep essential files, delete unnecessary files
          chmod +x ${ROOTFS_SCRIPT}
          ${ROOTFS_SCRIPT} -v ${{ matrix.ARCHITECTURE }}

          # Output cleaning result information
          df -hT ${PWD}
          echo "build_tag=Armbian_${{ matrix.ARCHITECTURE }}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload Armbian image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: build/output/images/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Rebuild Armbian
        uses: zwrt/build-armbian@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          build_target: armbian
          armbian_path: build/output/images/*.img.gz
          armbian_board: ${{ inputs.armbian_board }}
          armbian_kernel: ${{ inputs.armbian_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          armbian_fstype: ${{ inputs.armbian_fstype }}
          builder_name: ${{ inputs.builder_name }}

      - name: Upload Rebuild image to Release
        uses: ncipollo/release-action@v1
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### Armbian Image information
            - Default username: root
            - Default password: 1234
            - Install command: armbian-install
            - Update command: armbian-update
